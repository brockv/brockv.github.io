@model Homework8.Models.Item

<!-- Scripts required to display the modal window -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>



<!-- The Modal -->
<div class="container">
    <div class="row">
        <div class="col-lg-6"></div>
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal header section -->
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h3 class="modal-title" id="myModal-label">Create New Listing</h3>
                </div>

                <!-- Modal body section -->
                <div class="modal-body">

                    <!-- Input for the item's name -->
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-lg-6" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", id = "itemName" } })

                        <!-- Using a custom method for validation because my setup prevents default Razor validation from working -->
                        @Html.Label(" ", new { @class = "text-danger", id = "itemNameValidation" })
                    </div>

                    <!-- Input for the item's description -->
                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-lg-6" })
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", id = "itemDescription" } })

                        <!-- Using a custom method for validation because my setup prevents default Razor validation from working -->
                        @Html.Label(" ", new { @class = "text-danger", id = "itemDescriptionValidation" })
                    </div>

                    <!-- Input for the item's seller -->
                    <div class="form-group">
                        @Html.LabelFor(model => model.Seller, "Seller", htmlAttributes: new { @class = "control-label col-lg-6" })
                        @Html.DropDownList("Seller", null, htmlAttributes: new { @class = "form-control", id = "itemSeller" })
                    </div>

                </div>

                <!-- Modal footer section - contains the buttons -->
                <div class="modal-footer form-group">
                    <input type="button" class="btn btn-default" id="btnCancel" value="Cancel" data-dismiss="modal" />
                    <input type="button" class="btn btn-primary" id="btnCreate" value="Create Listing" onclick="saveItemDetails()" />
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Script to handle actions related to the modal window -->
<script type="text/javascript">
    function saveItemDetails() {
        /* Grab the user input from the form */
        var itemName = $("#itemName").val();
        var itemDescription = $("#itemDescription").val();
        var itemSeller = $("#itemSeller").val();

        /* Display error message if the item name is missing */
        if (itemName == "") {
            $("#itemNameValidation").text("*Item Name is required");
        }

        /* Display error message if the item description is missing */
        if (itemDescription == "") {
            $("#itemDescriptionValidation").text("*Item Description is required");
        }

        /* If both the item name and description are valid, proceed */
        if (itemName && itemDescription != "") {

            /* Clear the error messages, if there were any */
            $("#itemNameValidation").text(" ");
            $("#itemDescriptionValidation").text(" ");

            /* Build the information using the values we grabbed */
            var insertItem = { "Name": itemName, "Description": itemDescription, "Seller": itemSeller };

            /* Send the information to the method */
            $.post('/Items/CreateJSON', insertItem, refreshParentPage(), 'json');
        }
    }

    /* This is called in order to refresh the parent page so that the changes appear immediately */
    function refreshParentPage() {
        setTimeout(function () {
            location.reload();
        }, 250);
    }
</script>

